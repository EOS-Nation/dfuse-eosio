package accounthist

import (
	"testing"

	"github.com/eoscanada/eos-go"
	"github.com/stretchr/testify/assert"
)

func TestActionKey(t *testing.T) {
	mamaUint, _ := eos.StringToName("mama")
	key1Bytes := encodeActionKey(mamaUint, 1, uint64(1))
	assert.Equal(t,
		[]byte{
			0x2,
			0x91, 0xa4, 0x60, 0x0, 0x0, 0x0, 0x0, 0x0,
			0x01,
			0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe,
		},
		key1Bytes,
	)

	b1Uint, _ := eos.StringToName("b1")
	key1Bytes = encodeActionKey(b1Uint, 2, uint64(256))
	assert.Equal(t,
		[]byte{
			0x2,
			0x38, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
			0x02,
			0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff,
		},
		key1Bytes,
	)
}

func Test_decodeActionKeySeqNum(t *testing.T) {
	account, shardNum, ordinalNum := decodeActionKeySeqNum([]byte{
		0x2,
		0x91, 0xa4, 0x60, 0x0, 0x0, 0x0, 0x0, 0x0,
		0x01,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe,
	})
	mamaUint, _ := eos.StringToName("mama")
	assert.Equal(t, mamaUint, account)
	assert.Equal(t, byte(1), shardNum)
	assert.Equal(t, uint64(1), ordinalNum)

	account, shardNum, ordinalNum = decodeActionKeySeqNum([]byte{
		0x2,
		0x55, 0x30, 0x83, 0x4c, 0xc9, 0x32, 0x29, 0x20,
		0x02,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff,
	})
	eoscanadacomUint, _ := eos.StringToName("eoscanadacom")
	assert.Equal(t, eoscanadacomUint, account)
	assert.Equal(t, byte(2), shardNum)
	assert.Equal(t, uint64(256), ordinalNum)
}
